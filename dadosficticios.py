# -*- coding: utf-8 -*-
"""DadosFicticios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ESl2vnfsQTtGzHvPK2put5n3TOdMl_Wi
"""

import pandas as pd
import numpy as np
from datetime import datetime

# 1-criação de tdados ficticios
np.random.seed(42)
meses = ['janeiro', 'fevereiro', 'março', 'abril', 'maio', 'junho']
categorias = ['Eletrônicos', 'Vestuário', 'Alimentos','Móveis','Livros']

dados = {
    # Change size to 100 to match other arrays
    'mês_aquisicao': np.random.choice(meses, size=100),
    'nome': [f'Produto {i+1:02d}' for i in range(100)],
    'tipo': np.random.choice(categorias, size=100),
    'preco_compra': np.round(np.random.uniform(10, 500, size=100), 2),
    'preco_venda': lambda x: np.round(x * np.random.uniform(1.2, 2.5, size=100), 2),
    'estoque': np.random.randint(0, 100, size=100)
}

dados['preco_venda'] = dados['preco_venda'](dados['preco_compra'])

# 2- Criação do DataFrame
df = pd.DataFrame(dados)

# 3 - Cálculo de métricas
df['lucro_unitario'] = df['preco_venda'] - df['preco_compra']
df['valor_estoque'] = df['preco_compra'] * df['estoque']

# 4 - Salvar para CSV
# Assuming 'tp_csv' is a typo and should be 'to_csv'
df.to_csv('produtos100.csv', index=False, encoding='utf-8-sig', sep=';', decimal=',')

# 5 - Exemplo de análise
print(f'Total de Produtos: {len(df)}')
print(f'Valor total em estoque: R$ {df["valor_estoque"].sum():,.2f}')
print('\n5 primeiros registros:')
display(df.head())

# Número de alunos: 50

# disciplinas: Front-end, Back-end, Cibersegurança, Big Data, Java, Python, .NET, PHP, C#

# colunas: nomes dos alunos, disciplinas, Nota1, Nota2, Nota3, Média, Status (Aprovado/Reprovado)

# Condição: aprovação com média igual ou superior a 7.0

import pandas as pd
import numpy as np

# 1 - criação de dados
np.random.seed(42)
alunos = [f'Aluno {i+1:02d}' for i in range(50)]
disciplinas = ['Front-end', 'Back-end', 'Cibersegurança', 'Big Data', 'Java', 'Python','.NET', 'PHP', 'C#']

dados = {
    'nome_aluno': np.random.choice(alunos, size=200),
    'disciplina': np.random.choice(disciplinas, size=200),
    'nota1': np.random.randint(0, 11, size=200).round(1),
    'nota2': np.random.randint(0, 11, size=200).round(1),
    'nota3': np.random.randint(0, 11, size=200).round(1),
    'frequencia': np.random.randint(0, 101, size=200).round(1)
}
dados['media'] = ((dados['nota1'] + dados['nota2'] + dados['nota3']) / 3).round(1)
dados['situacao'] = np.where(dados['media'] >= 7, 'Aprovado', 'Reprovado')
dados['situacao'] = np.where(dados['frequencia'] < 75, 'Reprovado', dados['situacao'])

# 2 - Criação do DataFrame
df_alunos = pd.DataFrame(dados)

# 3 - Exibição do DataFrame
print(df_alunos.head(50))

import numpy as np
import matplotlib.pyplot as plt

# carteiras existentes
carteira_A = [0.01, 0.02, -0.015, 0.03, 0.005]
carteira_B = [0.012, 0.015, -0.01, 0.025, 0.008]
carteira_C = [0.1, 0.025, 0.02, 0.025, 0.027, 0.03]
carteira_D = [0.1, 0.027, 0.03, 0.0225, 0.023, 0.03]
carteira_E = [0.1, 0.02, 0.03, 0.04, 0.05, 0.06]
carteira_F = [-0.1, -0.02, -0.03, -0.035, -0.04, -0.055]

#adição de novas carteiras
carteira_G = [0.15, -0.05, 0.07, 0.03, -0.02, 0.04, -0.03, 0.08]
carteira_H = [0.02, 0.015, 0.017, 0.021, 0.019, 0.022, 0.025, 0.018]

def analise_descritiva(dados, nome):
  print(f"\n=== Análise Descritiva - {nome} ===")
  print(f"Média: {np.mean(dados):.4f}")
  print(f"Mediana: {np.median(dados):.4f}")
  print(f"Desvio Padrão: {np.std(dados):.4f}")
  print(f"Variância: {np.var(dados):.4f}")
  print(f"Valor Mínimo: {np.min(dados):.4f}")
  print(f"Valor Máximo: {np.max(dados):.4f}")

  q1, q2, q3 = np.percentile(dados, [25, 50, 75])
  iqr = q2 - q1
  limite_inferior = q1 - 1.5 * iqr
  limite_superior = q3 + 1.5 * iqr

  print("\n Medidas de Posição:")
  print(f"Q1 (25%): {q1:.4f}")
  print(f"Q2/Mediana (50%): {q2:.4f}")
  print(f"Q3 (75%): {q3:.4f}")
  print(f"IQR: {iqr:.4f}")

  print("\n Limites para Outliers:")
  print(f"Limite Inferior: {limite_inferior:.4f}")
  print(f"Limite Superior: {limite_superior:.4f}")

  outliers = [x for x in dados if x < limite_inferior or x > limite_superior]
  print(f"Outliers Detectados: {outliers}")

#aplicando análise descritiva
analise_descritiva(carteira_E, "Carteira E")
analise_descritiva(carteira_F, "Carteira F")

# Boxplot individual detalhado - retorno de quartis
plt.figure(figsize=(8, 6))
plt.boxplot(carteira_E, vert=True, patch_artist=True,
            boxprops=dict(facecolor='lightblue'),
            medianprops=dict(color='black'),
            whiskerprops=dict(color='blue'),
            capprops=dict(color='red')
            )
plt.title('Boxplot Detalhado - Carteira E', pad=20)
plt.ylabel('Retorno (%)')
plt.grid(axis='y', linestyle='--', alpha=0.7)

#Boxplot Comparativo - retorno de quartis
plt.figure(figsize=(10, 6))
box = plt.boxplot([carteira_A, carteira_B, carteira_E, carteira_F, carteira_G, carteira_H],
            labels=["A", "B", "C", "F", "G", "H"],
            patch_artist=True,
            medianprops=dict(color='black'))

# Customização de cores
colors = ['lightgreen', 'lightblue', 'lavender', 'peachpuff', 'lightyellow', 'honeydew']
for patch, color in zip(box['boxes'], colors):
    patch.set_facecolor(color)

plt.title('Comparação de Retornos entre Carteiras', pad=20)
plt.ylabel('Retorno (%)')
plt.xlabel('Carteira')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

# Matriz de correlação completa
def plot_correlacao(dados1,dados2,nome1,nome2):
  plt.figure(figsize=(8, 6))
  plt.scatter(dados1, dados2, color='darkblue', alpha=0.7)

  #Linha de tendência
  z = np.polyfit(dados1, dados2, 1)
  p = np.poly1d(z)
  plt.plot(dados1, p(dados1), 'r--')

  plt.title(f'Correlação entre {nome1} e {nome2}', pad=20)
  plt.xlabel(f"Retornos {nome1} (%)")
  plt.ylabel(f"Retornos {nome2} (%)")

  correlacao = np.corrcoef(dados1, dados2)[0, 1]
  plt.annotate(f'Correlação: {correlacao:.2f}',
               xy=(0.05, 0.95), xycoords='axes fraction',
               bbox=dict(boxstyle='round', fc='w'))

  plt.grid(True, linestyle='--', alpha=0.5)
  plt.show()

# Gerando gráficos de Correlação
plot_correlacao(carteira_A, carteira_B, "A", "B")
plot_correlacao(carteira_C, carteira_D, "C", "D")
plot_correlacao(carteira_E, carteira_F, "E", "F")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# 1 - criação de dados
np.random.seed(42)
alunos = [f'Aluno {i+1:02d}' for i in range(50)]
disciplinas = ['Front-end', 'Back-end', 'Cibersegurança', 'Big Data', 'Java', 'Python','.NET', 'PHP', 'C#']

edados = {
    'nome_aluno': np.random.choice(alunos, size=200),
    'disciplina': np.random.choice(disciplinas, size=200),
    'nota1': np.random.randint(0, 11, size=200).round(1),
    'nota2': np.random.randint(0, 11, size=200).round(1),
    'nota3': np.random.randint(0, 11, size=200).round(1),
    'frequencia': np.random.randint(0, 101, size=200).round(1)
}
edados['media'] = ((edados['nota1'] + edados['nota2'] + edados['nota3']) / 3).round(1)
edados['situacao'] = np.where(edados['media'] >= 6, 'Aprovado', 'Reprovado')

# 2 - Criação do DataFrame
df_alunos = pd.DataFrame(edados)

# 3 - Exibição do DataFrame
print(df_alunos.head(50))

# 4 - Análise descritiva
def analise_descritiva(edados, nota):
  print(f"\n=== Análise Descritiva - {nota} ===")
  print(f"Média: {np.mean(edados):.4f}")
  print(f"Mediana: {np.median(edados):.4f}")
  print(f"Desvio Padrão: {np.std(edados):.4f}")
  print(f"Variância: {np.var(edados):.4f}")
  print(f"Valor Mínimo: {np.min(edados):.4f}")
  print(f"Valor Máximo: {np.max(edados):.4f}")

  q1, q2, q3 = np.percentile(edados, [25, 50, 75])
  iqr = q2 - q1
  limite_inferior = q1 - 1.5 * iqr
  limite_superior = q3 + 1.5 * iqr

  print("\n Medidas de Posição:")
  print(f"Q1 (25%): {q1:.4f}")
  print(f"Q2/Mediana (50%): {q2:.4f}")
  print(f"Q3 (75%): {q3:.4f}")
  print(f"IQR: {iqr:.4f}")

  print("\n Limites para Outliers:")
  print(f"Limite Inferior: {limite_inferior:.4f}")
  print(f"Limite Superior: {limite_superior:.4f}")

  outliers = [x for x in edados if x < limite_inferior or x > limite_superior]
  print(f"Outliers Detectados: {outliers}")

#aplicando análise descritiva
analise_descritiva(edados['nota1'], "Nota 1")
analise_descritiva(edados['nota2'], "Nota 2")
analise_descritiva(edados['nota3'], "Nota 3")
analise_descritiva(edados['frequencia'], "Frequência") # Also apply descriptive analysis to frequency
analise_descritiva(edados['media'], "Média") # Also apply descriptive analysis to mean

# 5 - Gráficos
#Boxplot Comparativo - retorno de quartis
plt.figure(figsize=(10, 6))
# Remove the non-numeric 'situacao' data from the boxplot input
box = plt.boxplot([edados['nota1'], edados['nota2'], edados['nota3'], edados['media']],
            # Adjust labels to match the data provided
            labels=["Nota1", "Nota2", "Nota3", "Média"],
            patch_artist=True,
            medianprops=dict(color='black'))

# Customização de cores
# Adjust colors list to match the number of boxplots
colors = ['lightgreen', 'lightblue', 'lavender', 'lightyellow']
for patch, color in zip(box['boxes'], colors):
    patch.set_facecolor(color)

plt.title('Distribuição de Notas e Média', pad=20) # Update title for clarity
plt.ylabel('Valores') # Update ylabel
plt.xticks(rotation=45)
plt.xlabel('Métricas') # Update xlabel
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

#Boxplot Comparativo - retorno de quartis
plt.figure(figsize=(10, 6))
# Remove the non-numeric 'situacao' data from the boxplot input
box1 = plt.boxplot([ edados['frequencia']], # Removed edados['situacao']
            # Adjust labels to match the data provided
            labels=["Frequência"], # Adjusted labels
            patch_artist=True,
            medianprops=dict(color='black'))

# Customização de cores
# Adjust colors list to match the number of boxplots
colors = ['peachpuff'] # Adjusted colors list
for patch, color in zip(box1['boxes'], colors):
    patch.set_facecolor(color)

plt.title('Distribuição de Frequência', pad=20) # Update title for clarity
plt.ylabel('Valores') # Update ylabel
plt.xticks(rotation=45)
plt.xlabel('Métricas') # Update xlabel
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.show()

'''CRIAR CORRELAÇÃO ENTRE ALUNOS COM LINHA DE TENDÊNCIA
- Notas e médias
- Notas e Disciplinas
- Notas e Frequencia
- Média e Frequencia
- Média e Disciplinas
- Média e Situação
- Frequencia e Disciplinas
- Frequencia e Situação
'''